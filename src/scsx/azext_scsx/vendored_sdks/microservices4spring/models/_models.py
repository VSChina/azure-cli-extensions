# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Resource(Model):
    """The core properties of ARM resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The GEO location of the resource.
    :type location: str
    :param tags: Tags of the service which is a list of key value pairs that
     describe the resource.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(TrackedResource, self).__init__(**kwargs)
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)


class AppClusterResource(TrackedResource):
    """App Cluster resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The GEO location of the resource.
    :type location: str
    :param tags: Tags of the service which is a list of key value pairs that
     describe the resource.
    :type tags: dict[str, str]
    :param properties: Properties of the App Cluster resource
    :type properties:
     ~azure.mgmt.microservices4spring.models.ClusterResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'ClusterResourceProperties'},
    }

    def __init__(self, **kwargs):
        super(AppClusterResource, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have
    everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProxyResource, self).__init__(**kwargs)


class AppResource(ProxyResource):
    """App resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the App resource
    :type properties:
     ~azure.mgmt.microservices4spring.models.AppResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'AppResourceProperties'},
    }

    def __init__(self, **kwargs):
        super(AppResource, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class AppResourceProperties(Model):
    """App resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param public: Indicates whether the App exposes public endpoint
    :type public: bool
    :param port: Port of the App
    :type port: int
    :ivar url: URL of the App
    :vartype url: str
    :ivar provisioning_state: Provisioning state of the App. Possible values
     include: 'Succeeded', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.microservices4spring.models.AppResourceProvisioningState
    :param active_deployment_id: Azure resource Id of the active deployment of
     the App
    :type active_deployment_id: str
    """

    _validation = {
        'url': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'public': {'key': 'public', 'type': 'bool'},
        'port': {'key': 'port', 'type': 'int'},
        'url': {'key': 'url', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'active_deployment_id': {'key': 'activeDeploymentId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AppResourceProperties, self).__init__(**kwargs)
        self.public = kwargs.get('public', None)
        self.port = kwargs.get('port', None)
        self.url = None
        self.provisioning_state = None
        self.active_deployment_id = kwargs.get('active_deployment_id', None)


class ArtifactResource(ProxyResource):
    """Artifact resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the Artifact resource
    :type properties:
     ~azure.mgmt.microservices4spring.models.ArtifactResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ArtifactResourceProperties'},
    }

    def __init__(self, **kwargs):
        super(ArtifactResource, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class ArtifactResourceProperties(Model):
    """Artifact resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param type: Type of the Artifact. Possible values include: 'Jar',
     'DockerImage'
    :type type: str or ~azure.mgmt.microservices4spring.models.ArtifactType
    :param java_version: Java version of the Artifact
    :type java_version: str
    :param file_name: File name of the Artifact
    :type file_name: str
    :ivar hash: Hash value of the Artifact
    :vartype hash: str
    :ivar provisioning_state: Provisioning state of the Artifact. Possible
     values include: 'Creating', 'Succeeded', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.microservices4spring.models.ArtifactResourceProvisioningState
    :ivar error_message: Error message of the Artifact
    :vartype error_message: str
    :param source_location: Source location of the Artifact
    :type source_location: str
    :param version: Version of the Artifact
    :type version: str
    """

    _validation = {
        'hash': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'error_message': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'java_version': {'key': 'javaVersion', 'type': 'str'},
        'file_name': {'key': 'fileName', 'type': 'str'},
        'hash': {'key': 'hash', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'source_location': {'key': 'sourceLocation', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ArtifactResourceProperties, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.java_version = kwargs.get('java_version', None)
        self.file_name = kwargs.get('file_name', None)
        self.hash = None
        self.provisioning_state = None
        self.error_message = None
        self.source_location = kwargs.get('source_location', None)
        self.version = kwargs.get('version', None)


class ArtifactUploadDefinition(Model):
    """Artifact upload definition payload.

    :param source_location: Source location
    :type source_location: str
    :param upload_url: Upload URL
    :type upload_url: str
    """

    _attribute_map = {
        'source_location': {'key': 'sourceLocation', 'type': 'str'},
        'upload_url': {'key': 'uploadUrl', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ArtifactUploadDefinition, self).__init__(**kwargs)
        self.source_location = kwargs.get('source_location', None)
        self.upload_url = kwargs.get('upload_url', None)


class CloudError(Model):
    """An error response from the service.

    :param error:
    :type error: ~azure.mgmt.microservices4spring.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, **kwargs):
        super(CloudError, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """An error response from the service.

    :param code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable
     for display in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name
     of the property in error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details:
     list[~azure.mgmt.microservices4spring.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, **kwargs):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class ClusterResourceProperties(Model):
    """App Cluster properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: Provisioning state of the App Cluster. Possible
     values include: 'Creating', 'Updating', 'Deleting', 'Deleted',
     'Succeeded', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.microservices4spring.models.ProvisioningState
    :ivar endpoint: Endpoint of the App Cluster
    :vartype endpoint: str
    :ivar ssh_public_key: SSH Public Key of the App Cluster
    :vartype ssh_public_key: str
    :param vm_count: Virtual Machine count of the App Cluster
    :type vm_count: int
    :param vm_type: Virtual Machine type of the App Cluster
    :type vm_type: str
    :param config_server_git: Config server git properties of the App Cluster
    :type config_server_git:
     ~azure.mgmt.microservices4spring.models.ConfigServerGitProperties
    :param trace: Trace properties of the App Cluster
    :type trace: ~azure.mgmt.microservices4spring.models.TraceProperties
    :param git_authorization_list: Collection of the git authorization
     information
    :type git_authorization_list:
     list[~azure.mgmt.microservices4spring.models.GitAuthorizationProperties]
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'endpoint': {'readonly': True},
        'ssh_public_key': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'endpoint': {'key': 'endpoint', 'type': 'str'},
        'ssh_public_key': {'key': 'sshPublicKey', 'type': 'str'},
        'vm_count': {'key': 'vmCount', 'type': 'int'},
        'vm_type': {'key': 'vmType', 'type': 'str'},
        'config_server_git': {'key': 'configServerGit', 'type': 'ConfigServerGitProperties'},
        'trace': {'key': 'trace', 'type': 'TraceProperties'},
        'git_authorization_list': {'key': 'gitAuthorizationList', 'type': '[GitAuthorizationProperties]'},
    }

    def __init__(self, **kwargs):
        super(ClusterResourceProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.endpoint = None
        self.ssh_public_key = None
        self.vm_count = kwargs.get('vm_count', None)
        self.vm_type = kwargs.get('vm_type', None)
        self.config_server_git = kwargs.get('config_server_git', None)
        self.trace = kwargs.get('trace', None)
        self.git_authorization_list = kwargs.get('git_authorization_list', None)


class ConfigServerGitProperties(Model):
    """Config server git properties payload.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the config server. Possible values include:
     'NotAvailable', 'SpringCloudConfig', 'AzureAppConfiguration'
    :type type: str or
     ~azure.mgmt.microservices4spring.models.ConfigServerBackend
    :param git_repositories: Required. Collection of git repositories
    :type git_repositories:
     list[~azure.mgmt.microservices4spring.models.GitRepositoryProperty]
    """

    _validation = {
        'type': {'required': True},
        'git_repositories': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'git_repositories': {'key': 'gitRepositories', 'type': '[GitRepositoryProperty]'},
    }

    def __init__(self, **kwargs):
        super(ConfigServerGitProperties, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.git_repositories = kwargs.get('git_repositories', None)


class DebuggingKeys(Model):
    """Debugging keys payload.

    :param primary_key: Primary key
    :type primary_key: str
    :param secondary_key: Secondary key
    :type secondary_key: str
    :param primary_debugging_endpoint: Primary debugging endpoint
    :type primary_debugging_endpoint: str
    :param secondary_debugging_endpoint: Secondary debugging endpoint
    :type secondary_debugging_endpoint: str
    """

    _attribute_map = {
        'primary_key': {'key': 'primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'secondaryKey', 'type': 'str'},
        'primary_debugging_endpoint': {'key': 'primaryDebuggingEndpoint', 'type': 'str'},
        'secondary_debugging_endpoint': {'key': 'secondaryDebuggingEndpoint', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DebuggingKeys, self).__init__(**kwargs)
        self.primary_key = kwargs.get('primary_key', None)
        self.secondary_key = kwargs.get('secondary_key', None)
        self.primary_debugging_endpoint = kwargs.get('primary_debugging_endpoint', None)
        self.secondary_debugging_endpoint = kwargs.get('secondary_debugging_endpoint', None)


class DeploymentInstance(Model):
    """Deployment instance payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the deployment instance
    :vartype name: str
    :ivar status: Status of the deployment instance. Possible values include:
     'Pending', 'Running', 'Succeeded', 'Failed', 'Unknown'
    :vartype status: str or
     ~azure.mgmt.microservices4spring.models.InstanceStatus
    :ivar reason: Failed reason of the deployment instance
    :vartype reason: str
    :ivar discovery_status: Discovery status of the deployment instance
    :vartype discovery_status: str
    """

    _validation = {
        'name': {'readonly': True},
        'status': {'readonly': True},
        'reason': {'readonly': True},
        'discovery_status': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'reason': {'key': 'reason', 'type': 'str'},
        'discovery_status': {'key': 'discoveryStatus', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DeploymentInstance, self).__init__(**kwargs)
        self.name = None
        self.status = None
        self.reason = None
        self.discovery_status = None


class DeploymentResource(ProxyResource):
    """Deployment resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the Deployment resource
    :type properties:
     ~azure.mgmt.microservices4spring.models.DeploymentResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DeploymentResourceProperties'},
    }

    def __init__(self, **kwargs):
        super(DeploymentResource, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class DeploymentResourceProperties(Model):
    """Deployment resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param deployment_settings: Deployment settings of the Deployment
    :type deployment_settings:
     ~azure.mgmt.microservices4spring.models.DeploymentSettings
    :param artifact_name: Artifact name of the Deployment
    :type artifact_name: str
    :ivar provisioning_state: Provisioning state of the Deployment. Possible
     values include: 'Processing', 'Succeeded', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.microservices4spring.models.DeploymentResourceProvisioningState
    :ivar status: Status of the Deployment. Possible values include:
     'Starting', 'Stopping', 'Running'
    :vartype status: str or
     ~azure.mgmt.microservices4spring.models.DeploymentResourceStatus
    :ivar active: Indicates whether the Deployment is active
    :vartype active: bool
    :ivar instances: Collection of instances belong to the Deployment
    :vartype instances:
     list[~azure.mgmt.microservices4spring.models.DeploymentInstance]
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
        'active': {'readonly': True},
        'instances': {'readonly': True},
    }

    _attribute_map = {
        'deployment_settings': {'key': 'deploymentSettings', 'type': 'DeploymentSettings'},
        'artifact_name': {'key': 'artifactName', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'active': {'key': 'active', 'type': 'bool'},
        'instances': {'key': 'instances', 'type': '[DeploymentInstance]'},
    }

    def __init__(self, **kwargs):
        super(DeploymentResourceProperties, self).__init__(**kwargs)
        self.deployment_settings = kwargs.get('deployment_settings', None)
        self.artifact_name = kwargs.get('artifact_name', None)
        self.provisioning_state = None
        self.status = None
        self.active = None
        self.instances = None


class DeploymentSettings(Model):
    """Deployment settings payload.

    :param cpu: Required CPU
    :type cpu: int
    :param memory_in_gb: Required Memory size in GB
    :type memory_in_gb: int
    :param temporary_disk: Temporary disk settings
    :type temporary_disk:
     ~azure.mgmt.microservices4spring.models.TemporaryDisk
    :param persistent_disk: Persistent disk settings
    :type persistent_disk:
     ~azure.mgmt.microservices4spring.models.PersistentDisk
    :param jvm_parameter: JVM parameter
    :type jvm_parameter: str
    :param instance_count: Instance count
    :type instance_count: int
    :param environment_variables: Collection of environment variables
    :type environment_variables: dict[str, str]
    """

    _attribute_map = {
        'cpu': {'key': 'cpu', 'type': 'int'},
        'memory_in_gb': {'key': 'memoryInGB', 'type': 'int'},
        'temporary_disk': {'key': 'temporaryDisk', 'type': 'TemporaryDisk'},
        'persistent_disk': {'key': 'persistentDisk', 'type': 'PersistentDisk'},
        'jvm_parameter': {'key': 'jvmParameter', 'type': 'str'},
        'instance_count': {'key': 'instanceCount', 'type': 'int'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(DeploymentSettings, self).__init__(**kwargs)
        self.cpu = kwargs.get('cpu', None)
        self.memory_in_gb = kwargs.get('memory_in_gb', None)
        self.temporary_disk = kwargs.get('temporary_disk', None)
        self.persistent_disk = kwargs.get('persistent_disk', None)
        self.jvm_parameter = kwargs.get('jvm_parameter', None)
        self.instance_count = kwargs.get('instance_count', None)
        self.environment_variables = kwargs.get('environment_variables', None)


class FileShareUrlResponse(Model):
    """File share URL payload.

    :param url: URL of the file share
    :type url: str
    """

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(FileShareUrlResponse, self).__init__(**kwargs)
        self.url = kwargs.get('url', None)


class GetFileShareUrlRequestPayload(Model):
    """Get file share URL payload.

    All required parameters must be populated in order to send to Azure.

    :param start: Required. Start time of the file share
    :type start: datetime
    :param expiry: Required. End time of the file share
    :type expiry: datetime
    """

    _validation = {
        'start': {'required': True},
        'expiry': {'required': True},
    }

    _attribute_map = {
        'start': {'key': 'start', 'type': 'iso-8601'},
        'expiry': {'key': 'expiry', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(GetFileShareUrlRequestPayload, self).__init__(**kwargs)
        self.start = kwargs.get('start', None)
        self.expiry = kwargs.get('expiry', None)


class GitAuthorizationProperties(Model):
    """Git authorization properties payload.

    All required parameters must be populated in order to send to Azure.

    :param git_platform: Required. Git platform. Possible values include:
     'AzureDevOps', 'GitHub'
    :type git_platform: str or
     ~azure.mgmt.microservices4spring.models.Platform
    :param action: Required. Authorization action. Possible values include:
     'Authorize', 'Revoke', 'TokenApply'
    :type action: str or
     ~azure.mgmt.microservices4spring.models.AuthorizationAction
    :param credentials: Platform credentials
    :type credentials:
     ~azure.mgmt.microservices4spring.models.PlatformCredentials
    """

    _validation = {
        'git_platform': {'required': True},
        'action': {'required': True},
    }

    _attribute_map = {
        'git_platform': {'key': 'gitPlatform', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
        'credentials': {'key': 'credentials', 'type': 'PlatformCredentials'},
    }

    def __init__(self, **kwargs):
        super(GitAuthorizationProperties, self).__init__(**kwargs)
        self.git_platform = kwargs.get('git_platform', None)
        self.action = kwargs.get('action', None)
        self.credentials = kwargs.get('credentials', None)


class GitRepositoryProperty(Model):
    """Git repository property payload.

    All required parameters must be populated in order to send to Azure.

    :param repository_name: Required. Name of the repository
    :type repository_name: str
    :param uri: Required. URI of the repository
    :type uri: str
    :param label: Label of the repository
    :type label: str
    :param patterns: Collection of pattern of the repository
    :type patterns: list[str]
    :param searching_path: Searching path of the repository
    :type searching_path: list[str]
    """

    _validation = {
        'repository_name': {'required': True},
        'uri': {'required': True},
    }

    _attribute_map = {
        'repository_name': {'key': 'repositoryName', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'patterns': {'key': 'patterns', 'type': '[str]'},
        'searching_path': {'key': 'searchingPath', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(GitRepositoryProperty, self).__init__(**kwargs)
        self.repository_name = kwargs.get('repository_name', None)
        self.uri = kwargs.get('uri', None)
        self.label = kwargs.get('label', None)
        self.patterns = kwargs.get('patterns', None)
        self.searching_path = kwargs.get('searching_path', None)


class LogSpecification(Model):
    """Specifications of the Log for Azure Monitoring.

    :param name: Name of the log
    :type name: str
    :param display_name: Localized friendly display name of the log
    :type display_name: str
    :param blob_duration: Blob duration of the log
    :type blob_duration: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(LogSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.blob_duration = kwargs.get('blob_duration', None)


class MetricDimension(Model):
    """MetricDimension.

    :param name:
    :type name: str
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MetricDimension, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)


class MetricSpecification(Model):
    """Specifications of the Metrics for Azure Monitoring.

    :param name: Name of the metric
    :type name: str
    :param display_name: Localized friendly display name of the metric
    :type display_name: str
    :param display_description: Localized friendly description of the metric
    :type display_description: str
    :param unit: Unit that makes sense for the metric
    :type unit: str
    :param category: Name of the metric category that the metric belongs to. A
     metric can only belong to a single category.
    :type category: str
    :param aggregation_type: Only provide one value for this field. Valid
     values: Average, Minimum, Maximum, Total, Count.
    :type aggregation_type: str
    :param supported_aggregation_types: Supported agregation types
    :type supported_aggregation_types: list[str]
    :param supported_time_grain_types: Supported time grain types
    :type supported_time_grain_types: list[str]
    :param fill_gap_with_zero: Optional. If set to true, then zero will be
     returned for time duration where no metric is emitted/published.
    :type fill_gap_with_zero: bool
    :param dimensions: Dimensions of the metric
    :type dimensions:
     list[~azure.mgmt.microservices4spring.models.MetricDimension]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'supported_aggregation_types': {'key': 'supportedAggregationTypes', 'type': '[str]'},
        'supported_time_grain_types': {'key': 'supportedTimeGrainTypes', 'type': '[str]'},
        'fill_gap_with_zero': {'key': 'fillGapWithZero', 'type': 'bool'},
        'dimensions': {'key': 'dimensions', 'type': '[MetricDimension]'},
    }

    def __init__(self, **kwargs):
        super(MetricSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.display_description = kwargs.get('display_description', None)
        self.unit = kwargs.get('unit', None)
        self.category = kwargs.get('category', None)
        self.aggregation_type = kwargs.get('aggregation_type', None)
        self.supported_aggregation_types = kwargs.get('supported_aggregation_types', None)
        self.supported_time_grain_types = kwargs.get('supported_time_grain_types', None)
        self.fill_gap_with_zero = kwargs.get('fill_gap_with_zero', None)
        self.dimensions = kwargs.get('dimensions', None)


class NameAvailability(Model):
    """Name availability result payload.

    :param name_available: Indicates whether the name is available
    :type name_available: bool
    :param reason: Reason why the name is not available
    :type reason: str
    :param message: Message why the name is not available
    :type message: str
    """

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(NameAvailability, self).__init__(**kwargs)
        self.name_available = kwargs.get('name_available', None)
        self.reason = kwargs.get('reason', None)
        self.message = kwargs.get('message', None)


class NameAvailabilityParameters(Model):
    """Name availability parameters payload.

    :param type: Type of the resource to check name availability
    :type type: str
    :param name: Name to be checked
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(NameAvailabilityParameters, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class OperationDetail(Model):
    """Operation detail payload.

    :param name: Name of the operation
    :type name: str
    :param data_action: Indicates whether the operation is a data action
    :type data_action: bool
    :param display: Display of the operation
    :type display: ~azure.mgmt.microservices4spring.models.OperationDisplay
    :param origin: Origin of the operation
    :type origin: str
    :param properties: Properties of the operation
    :type properties:
     ~azure.mgmt.microservices4spring.models.OperationProperties
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'data_action': {'key': 'dataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'OperationProperties'},
    }

    def __init__(self, **kwargs):
        super(OperationDetail, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.data_action = kwargs.get('data_action', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.properties = kwargs.get('properties', None)


class OperationDisplay(Model):
    """Operation display payload.

    :param provider: Resource provider of the operation
    :type provider: str
    :param resource: Resource of the operation
    :type resource: str
    :param operation: Localized friendly name for the operation
    :type operation: str
    :param description: Localized friendly description for the operation
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class OperationProperties(Model):
    """Extra Operation properties.

    :param service_specification: Service specifications of the operation
    :type service_specification:
     ~azure.mgmt.microservices4spring.models.ServiceSpecification
    """

    _attribute_map = {
        'service_specification': {'key': 'serviceSpecification', 'type': 'ServiceSpecification'},
    }

    def __init__(self, **kwargs):
        super(OperationProperties, self).__init__(**kwargs)
        self.service_specification = kwargs.get('service_specification', None)


class PersistentDisk(Model):
    """Persistent disk payload.

    :param size_in_gb: Size of the persistent disk in GB
    :type size_in_gb: int
    :param mount_path: Mount path of the persistent disk
    :type mount_path: str
    """

    _validation = {
        'size_in_gb': {'maximum': 50, 'minimum': 0},
    }

    _attribute_map = {
        'size_in_gb': {'key': 'sizeInGB', 'type': 'int'},
        'mount_path': {'key': 'mountPath', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(PersistentDisk, self).__init__(**kwargs)
        self.size_in_gb = kwargs.get('size_in_gb', None)
        self.mount_path = kwargs.get('mount_path', None)


class PlatformCredentials(Model):
    """Platform credentials payload.

    :param access_token: Access token
    :type access_token: str
    :param authorization_code: Authorization code
    :type authorization_code: str
    """

    _attribute_map = {
        'access_token': {'key': 'accessToken', 'type': 'str'},
        'authorization_code': {'key': 'authorizationCode', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(PlatformCredentials, self).__init__(**kwargs)
        self.access_token = kwargs.get('access_token', None)
        self.authorization_code = kwargs.get('authorization_code', None)


class RegenerateDebuggingKeyRequestPayload(Model):
    """Regenerate debugging key request payload.

    All required parameters must be populated in order to send to Azure.

    :param key_type: Required. Type of the debugging key. Possible values
     include: 'Primary', 'Secondary'
    :type key_type: str or
     ~azure.mgmt.microservices4spring.models.DebuggingKeyType
    """

    _validation = {
        'key_type': {'required': True},
    }

    _attribute_map = {
        'key_type': {'key': 'keyType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RegenerateDebuggingKeyRequestPayload, self).__init__(**kwargs)
        self.key_type = kwargs.get('key_type', None)


class ServiceBindingResource(ProxyResource):
    """Service Binding resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the Service Binding resource
    :type properties:
     ~azure.mgmt.microservices4spring.models.ServiceBindingResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ServiceBindingResourceProperties'},
    }

    def __init__(self, **kwargs):
        super(ServiceBindingResource, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class ServiceBindingResourceProperties(Model):
    """Service Binding resource properties payload.

    :param connection_string: Connection string of the Service Binding
     resource
    :type connection_string: str
    :param binding_parameters: Binding parameters of the Service Binding
     resource
    :type binding_parameters: dict[str, object]
    :param binding_type: Update time of the Service Binding resource
    :type binding_type: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'binding_parameters': {'key': 'bindingParameters', 'type': '{object}'},
        'binding_type': {'key': 'bindingType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceBindingResourceProperties, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.binding_parameters = kwargs.get('binding_parameters', None)
        self.binding_type = kwargs.get('binding_type', None)


class ServiceSpecification(Model):
    """Service specification payload.

    :param log_specifications: Specifications of the Log for Azure Monitoring
    :type log_specifications:
     list[~azure.mgmt.microservices4spring.models.LogSpecification]
    :param metric_specifications: Specifications of the Metrics for Azure
     Monitoring
    :type metric_specifications:
     list[~azure.mgmt.microservices4spring.models.MetricSpecification]
    """

    _attribute_map = {
        'log_specifications': {'key': 'logSpecifications', 'type': '[LogSpecification]'},
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[MetricSpecification]'},
    }

    def __init__(self, **kwargs):
        super(ServiceSpecification, self).__init__(**kwargs)
        self.log_specifications = kwargs.get('log_specifications', None)
        self.metric_specifications = kwargs.get('metric_specifications', None)


class TemporaryDisk(Model):
    """Temporary disk payload.

    :param size_in_gb: Size of the temporary disk in GB
    :type size_in_gb: int
    :param mount_path: Mount path of the temporary disk
    :type mount_path: str
    """

    _validation = {
        'size_in_gb': {'maximum': 5, 'minimum': 0},
    }

    _attribute_map = {
        'size_in_gb': {'key': 'sizeInGB', 'type': 'int'},
        'mount_path': {'key': 'mountPath', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TemporaryDisk, self).__init__(**kwargs)
        self.size_in_gb = kwargs.get('size_in_gb', None)
        self.mount_path = kwargs.get('mount_path', None)


class TraceProperties(Model):
    """Trace properties payload.

    :param enabled: Indicates whether enable the tracing functioanlity
    :type enabled: bool
    :param app_insight_instrumentation_key: Target application insight
     instrumentation key
    :type app_insight_instrumentation_key: str
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'app_insight_instrumentation_key': {'key': 'appInsightInstrumentationKey', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TraceProperties, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.app_insight_instrumentation_key = kwargs.get('app_insight_instrumentation_key', None)
